{"version":3,"sources":["components/Toolbar/Menu.js","components/Toolbar/CategoryBreakfast.js","components/Toolbar/CategoryMeal.js","components/Toolbar/ChefView.js","components/Toolbar/Header.js","App.js","serviceWorker.js","index.js"],"names":["Menu","_this","this","react_default","a","createElement","variant","className","onClick","props","addToOrder","extraname","type","name","Component","CategoryBreakfast","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","visible","order","event","preventDefault","setState","_this2","handleClick","bind","data","breakfast","map","item","i","Toolbar_Menu","description","price","key","CategoryMeal","meal","ChefView","Header","href","react_router_dom","to","App","saveData","Array","from","saveOrder","push","printOrder","deleteItem","value","index","items","slice","concat","length","components_Toolbar_Header","react_router","exact","path","Container","Row","Col","sm","Toolbar_CategoryBreakfast","Toolbar_CategoryMeal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc349e38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport data from './menuItems.json';\n\n\nclass Menu extends Component {   \n    render() {\n        return (\n                <button variant=\"dark\" className = \"menu-buttons\" onClick={() => this.props.addToOrder(this.props.extraname, this.props.type)}>\n                    {this.props.name}\n                </button>\n        );\n    }\n}\n\nexport default Menu","import React, {Component} from \"react\";\nimport Menu from \"./Menu\";\nimport \"./Category.css\";\nimport data from './menuItems.json'\n  \nclass CategoryBreakfast extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            visible:false, \n            order:[]\n        }\n    }\n\n    handleClick(event){\n        event.preventDefault();\n        this.setState({\n            visible:!this.state.visible\n        })\n    }\n\n\n\n\n    render() {\n        return (\n            <div className=\"category\">\n          \n                <h3 onClick={this.handleClick.bind(this)}>{this.props.name}</h3>\n                <ul className={this.state.visible? \"visible\" : \"no-visible\"}>\n                    {data.breakfast.map((item,i)=> {\n                        return <Menu type=\"breakfast\" addToOrder={this.props.addToOrder} extraname={i} name= {item.description} price={item.price} key={\"breakfast\"+i} />\n                        })},\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CategoryBreakfast;","import React, {Component} from \"react\";\nimport Menu from \"./Menu\";\nimport \"./Category.css\";\nimport data from './menuItems.json'\n  \nclass CategoryMeal extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            visible:false, \n            order:[]\n        }\n    }\n\n    handleClick(event){\n        event.preventDefault();\n        this.setState({\n            visible:!this.state.visible\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"category\">\n                <h3 onClick={this.handleClick.bind(this)}>{this.props.name}</h3>\n                <ul className={this.state.visible? \"visible\" : \"no-visible\"}>\n                    {data.meal.map((item,i)=> {\n                      return <Menu type=\"meal\" addToOrder={this.props.addToOrder} extraname = {i} name= {item.description} price={item.price} key={\"meal\"+i} />\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CategoryMeal;","import React, { Component } from \"react\";\nimport data from './menuItems.json';\n\n\n\nclass ChefView extends Component {   \n    render() {\n        return (\n                <h1>Hola</h1>\n        );\n    }\n}\n\nexport default ChefView","import React, {Component} from \"react\";\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport \"./Header.css\";\nimport {Link} from 'react-router-dom'\nimport ChefView from \"./ChefView\";\n\nclass Header extends Component {\n    render(){\n        return(\n                \n<div className= \"Header\">\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"#\">Vegan Burger Queen</a>\n        <a className=\"nav-link\" href=\"#\">Mesera<span className=\"sr-only\">(current)</span></a>\n      <li className=\"nav-item\">\n      <BrowserRouter>\n  <Link to = \"/ChefView\"className=\"nav-link\" href=\"#\">Cocina</Link>\n  </BrowserRouter>\n      </li>\n</nav>\n\n</div> \n         ) }\n\n}\nexport default Header\n","import {BrowserRouter, Route} from 'react-router-dom';\nimport React, {Component} from \"react\";\nimport CategoryBreakfast from \"./components/Toolbar/CategoryBreakfast.js\";\nimport CategoryMeal from \"./components/Toolbar/CategoryMeal.js\";\nimport Header from \"./components/Toolbar/Header\";\nimport Menu from \"./components/Toolbar/Menu\";\nimport data from './components/Toolbar/menuItems.json'\nimport { Row, Col, Container } from 'react-bootstrap';\nimport ChefView from \"./components/Toolbar/ChefView\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      saveOrder : []\n    };\n  }\n\n  // extraname es el indice \n  addToOrder = (extraname, type) => {\n    let saveData = Array.from(this.state.saveOrder); // se copia el arreglo \n    saveData.push(data[type][extraname])//checa menu.js ahi tenemos la funcion de addTOorder donde le estamos diciendo a esta funcion que es extraname y type y esos dos datos lo guadamos en este nuevo arreglo\n    this.setState({\n        saveOrder: saveData\n    })\n};\n\n  printOrder = () => { \n    // de aqui borramos el inerHTML y lo convertimos en un return aqui mismo ponemos el boton de delete\n    return this.state.saveOrder.map((item, i) => {\n      return (<div key={\"order\"+i}> \n      <span>{item.description}/{item.price} &nbsp; <input type=\"button\" onClick={() => this.deleteItem(i)} value=\"X\"></input></span>\n      </div>)\n    })\n  }\n\n  deleteItem = (index) => {\n    \n    let items = Array.from(this.state.saveOrder);\n    items = items.slice(0, index).concat(items.slice(index + 1, items.length));\n    this.setState({ saveOrder: items });\n  }\n\n  render () {\n    return (\n      <div className = \"App\">\n <Header/>\n <BrowserRouter>\n <Route exact path = \"/ChefView\" Component = {ChefView}/>\n </BrowserRouter>\n <Menu/>\n <Container>\n   <Row>\n     <Col sm= {7}>\n     <div className=\"menu\">\n      <li>\n        <CategoryBreakfast addToOrder={this.addToOrder} name=\"Almuerzos\"/>\n        <CategoryMeal addToOrder={this.addToOrder} name= \"Comida y cena\"/>\n      </li>\n    </div>\n     </Col>\n     <Col sm= {5}>\n     <div className = \"print-order\">\n     {this.printOrder()}\n     </div>\n     </Col>\n   </Row>\n </Container>\n  </div>\n  );\n    }\n     }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}